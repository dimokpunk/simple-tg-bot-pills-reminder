import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler
import schedule
import time
import random
import os
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è PythonAnywhere
os.environ["HTTPS_PROXY"] = "http://proxy.server:3128"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "8309621303:AAFpBlDwyrTaoZFEtHtxSYuyrVXszH9B-0Q"
ADMIN_CHAT_ID = 1185667911  # –í–∞—à chat_id, –¥–æ–±–∞–≤—å—Ç–µ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
CHAT_IDS = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –°–ø–∏—Å–æ–∫ –∏–∑ 30 —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫ –ø–æ —Ç–µ–º–µ "–ó–¥–æ—Ä–æ–≤—å–µ" —Å Unsplash
HEALTH_IMAGES = [
    "https://images.unsplash.com/photo-1506126613408-eca37b8d7a2d",
    "https://images.unsplash.com/photo-1540497077202-7c8a3999166f",
    "https://images.unsplash.com/photo-1512621776951-a57141f2eefd",
    "https://images.unsplash.com/photo-1498837167922-ddd27525d352",
    "https://images.unsplash.com/photo-1517430816045-df4b7de11d1d",
    "https://images.unsplash.com/photo-1507226988209-1b7590f7d6a7",
    "https://images.unsplash.com/photo-1518611012118-69688d064911",
    "https://images.unsplash.com/photo-1544367567-0f2fcb009655",
    "https://images.unsplash.com/photo-1505751172876-fa1923c5c7a2",
    "https://images.unsplash.com/photo-1515377905703-c4788e51af15",
    "https://images.unsplash.com/photo-1522898467493-49726bf28798",
    "https://images.unsplash.com/photo-1494599948593-3da3d82e5902",
    "https://images.unsplash.com/photo-1532938911079-1b3550d97e26",
    "https://images.unsplash.com/photo-1505576391880-b3f9d71385cb",
    "https://images.unsplash.com/photo-1543353071-873f17a7a088",
    "https://images.unsplash.com/photo-1506459225024-8f6738c9ef73",
    "https://images.unsplash.com/photo-1504813184591-01572f98c85f",
    "https://images.unsplash.com/photo-1490818387583-1c64a8f31b4f",
    "https://images.unsplash.com/photo-1515378791036-0648a3ef77b2",
    "https://images.unsplash.com/photo-1506521781261-d73408351382",
    "https://images.unsplash.com/photo-1517832207067-4db24a2ae47c",
    "https://images.unsplash.com/photo-1541623088465-0c7c4f4b24e4",
    "https://images.unsplash.com/photo-1518310383032-8204a6ab07fa",
    "https://images.unsplash.com/photo-1507048331197-7d4ac70811cf",
    "https://images.unsplash.com/photo-1519681393784-d120267933ba",
    "https://images.unsplash.com/photo-1518609878373-06d740f60d8b",
    "https://images.unsplash.com/photo-1528715471579-eb29c3d01b03",
    "https://images.unsplash.com/photo-1517433367423-79d631011783",
    "https://images.unsplash.com/photo-1506126279646-1db9f1b4b7a0",
    "https://images.unsplash.com/photo-1515378960530-7c0da6231fb1"
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏
bot = telegram.Bot(token=TOKEN, request=telegram.utils.request.Request(con_pool_size=8, connect_timeout=10.0, read_timeout=30.0))

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç–∞–±–ª–µ—Ç–∫–µ
def send_pill_reminder():
    if not CHAT_IDS:
        print("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return
    message = "–ù–µ –∑–∞–±—É–¥—å –≤—ã–ø–∏—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏! –ë—É–¥—å –∑–¥–æ—Ä–æ–≤! üòä"
    image = random.choice(HEALTH_IMAGES)  # –°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞
    keyboard = [[InlineKeyboardButton("–¢–∞–±–ª–µ—Ç–∫–∏ –≤—ã–ø–∏–ª! ‚úÖ", callback_data="pill_taken")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    for chat_id in CHAT_IDS:
        try:
            bot.send_message(chat_id=chat_id, text=message, reply_markup=reply_markup)
            bot.send_photo(chat_id=chat_id, photo=image)
            print(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è chat_id {chat_id} –≤ {datetime.now()} (UTC)")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è chat_id {chat_id}: {e}")
            if ADMIN_CHAT_ID:
                bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"–û—à–∏–±–∫–∞ –¥–ª—è chat_id {chat_id}: {str(e)}")

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–¥–æ—Ä–æ–≤—å–µ –≤ 12:00 (+4)
def send_health_reminder():
    if not CHAT_IDS:
        print("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∑–¥–æ—Ä–æ–≤—å–µ.")
        return
    message = "–ù–µ –∑–∞–±—ã–≤–∞–π –¥—É–º–∞—Ç—å –æ —Å–≤–æ—ë–º –∑–¥–æ—Ä–æ–≤—å–µ! –¢–≤–æ–∏ –¥–µ—Ç–∏ –∏ –≤–Ω—É–∫–∏ —Ö–æ—Ç—è—Ç —á—Ç–æ–±—ã —Ç—ã –±—ã–ª —Å –Ω–∏–º–∏ —Ä—è–¥–æ–º –∫–∞–∫ –º–æ–∂–Ω–æ –¥–æ–ª—å—à–µ, –≤ –¥–æ–±—Ä–æ–º –∑–¥—Ä–∞–≤–∏–∏."
    for chat_id in CHAT_IDS:
        try:
            bot.send_message(chat_id=chat_id, text=message)
            print(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–¥–æ—Ä–æ–≤—å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è chat_id {chat_id} –≤ {datetime.now()} (UTC)")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–¥–æ—Ä–æ–≤—å–µ –¥–ª—è chat_id {chat_id}: {e}")
            if ADMIN_CHAT_ID:
                bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"–û—à–∏–±–∫–∞ –¥–ª—è chat_id {chat_id}: {str(e)}")

# –ö–æ–º–∞–Ω–¥–∞ /test
def test(update, context):
    if not CHAT_IDS:
        update.message.reply_text("–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ —Ç—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π /start.")
        return
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ UTC (+4 UTC: 6:00‚Üí2:00, 12:00‚Üí8:00, 20:00‚Üí16:00)
    now = datetime.now(ZoneInfo("UTC"))
    today = now.date()
    reminder_times = [
        datetime(today.year, today.month, today.day, 2, 0, tzinfo=ZoneInfo("UTC")),  # 6:00 +4
        datetime(today.year, today.month, today.day, 8, 0, tzinfo=ZoneInfo("UTC")),  # 12:00 +4
        datetime(today.year, today.month, today.day, 16, 0, tzinfo=ZoneInfo("UTC"))  # 20:00 +4
    ]
    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
    next_day_reminders = [
        t + timedelta(days=1) for t in reminder_times if t <= now
    ]
    reminder_times.extend(next_day_reminders)
    # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è
    next_reminder = min(t for t in reminder_times if t > now)
    time_diff = next_reminder - now
    hours, remainder = divmod(int(time_diff.total_seconds()), 3600)
    minutes = remainder // 60
    reminder_str = next_reminder.astimezone(ZoneInfo("Etc/GMT-4")).strftime("%H:%M")
    update.message.reply_text(
        f"–Ø –ø–æ–º–Ω—é, —á—Ç–æ –±–ª–∏–∂–∞–π—à–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤ {reminder_str}, –¥–æ –Ω–µ–≥–æ –æ—Å—Ç–∞–ª–æ—Å—å {hours} —á–∞—Å–æ–≤ –∏ {minutes} –º–∏–Ω—É—Ç."
    )
    print(f"–ö–æ–º–∞–Ω–¥–∞ /test –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è chat_id {update.message.chat_id} –≤ {datetime.now()} (UTC)")

# –ö–æ–º–∞–Ω–¥–∞ /start
def start(update, context):
    chat_id = update.message.chat_id
    CHAT_IDS.add(chat_id)
    update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–¥–æ—Ä–æ–≤—å–µ! üòä "
        "–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ —Ç–∞–±–ª–µ—Ç–∫–∞—Ö –≤ 6:00 –∏ 20:00, –∞ —Ç–∞–∫–∂–µ –æ –∑–∞–±–æ—Ç–µ –æ –∑–¥–æ—Ä–æ–≤—å–µ –≤ 12:00. "
        "–ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π /stop."
    )
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chat_id {chat_id} –Ω–∞—á–∞–ª –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ {datetime.now()} (UTC)")

# –ö–æ–º–∞–Ω–¥–∞ /stop
def stop(update, context):
    chat_id = update.message.chat_id
    if chat_id in CHAT_IDS:
        CHAT_IDS.remove(chat_id)
        update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π /start.")
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chat_id {chat_id} –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ {datetime.now()} (UTC)")
    else:
        update.message.reply_text("–¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

# –ü–æ–ª—É—á–µ–Ω–∏–µ chat_id
def get_chat_id(update, context):
    chat_id = update.message.chat_id
    update.message.reply_text(f"–í–∞—à chat_id: {chat_id}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏
def button_callback(update, context):
    query = update.callback_query
    query.answer()
    if query.data == "pill_taken":
        query.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢—ã –≤—ã–ø–∏–ª —Ç–∞–±–ª–µ—Ç–∫–∏, –º–æ–ª–æ–¥–µ—Ü! üòä")
        if ADMIN_CHAT_ID:
            try:
                bot.send_message(
                    chat_id=ADMIN_CHAT_ID,
                    text=f"–ü–∞–ø–∞ –≤—ã–ø–∏–ª —Ç–∞–±–ª–µ—Ç–∫–∏, –Ω–µ –∑–∞–±—É–¥—å –µ–º—É –Ω–∞–ø–∏—Å–∞—Ç—å, —Å–ø—Ä–æ—Å–∏—Ç—å –∫–∞–∫ –¥–µ–ª–∞! (chat_id: {query.message.chat_id})"
                )
                print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {datetime.now()} (UTC)")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–¥–ª—è +4 UTC: 6:00‚Üí2:00 UTC, 20:00‚Üí16:00 UTC, 12:00‚Üí8:00 UTC)
schedule.every().day.at("02:00").do(send_pill_reminder)  # 6:00 +4
schedule.every().day.at("16:00").do(send_pill_reminder)  # 20:00 +4
schedule.every().day.at("08:00").do(send_health_reminder)  # 12:00 +4

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    updater = Updater(TOKEN, use_context=True, request_kwargs={'connect_timeout': 10.0, 'read_timeout': 30.0})
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("stop", stop))
    dp.add_handler(CommandHandler("get_chat_id", get_chat_id))
    dp.add_handler(CommandHandler("test", test))
    dp.add_handler(CallbackQueryHandler(button_callback))
    updater.start_polling()
    while True:
        schedule.run_pending()
        time.sleep(60)

if __name__ == '__main__':
    main()